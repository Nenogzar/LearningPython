# --Loops--
# По същество циклите са начин да правите нещо отново и отново.
# Започнете с въвеждане на код cat.py в прозореца на терминала.
# В текстовия редактор започнете със следния код:
"""""""""
print("meow")
print("meow")
print("meow")

"""""""""""
# Изпълнявайки този код, като напишете python cat.py, ще забележите, че програмата изпълнява meow три пъти.
# Когато се развивате като програмист, вие искате да обмислите как човек може да подобри области от своя код,
# където въвежда едно и също нещо отново и отново.
# Представете си къде някой би искал да „meow“ 500 пъти.
# Би ли било логично да въвеждате същия израз на print("meow") отново и отново?
# Циклите ви позволяват да създадете блок от код, който се изпълнява отново и отново.

# --While Loops--
# Цикълът while е почти универсален във всички кодиращи езици.
# Такъв цикъл ще повтаря блок от код отново и отново.
# В прозореца на текстовия редактор редактирайте кода си, както следва:
"""""""""
i = 3
while i != 0:
    print("meow")
"""""""""
# Забележете как въпреки че този код ще изпълни print("meow") няколко пъти, той никога няма да спре!
# Ще се върти завинаги. докато циклите работят, като многократно питат дали условието на цикъла е изпълнено.
# В този случай компилаторът пита „не е ли равно на нула?“
# Когато заседнете в цикъл, който се изпълнява вечно, можете да натиснете control-c на клавиатурата си, за да излезете от цикъла.
# За да коригираме този цикъл, който продължава вечно, можем да редактираме нашия код, както следва
"""""""""
i = 3
while i != 0:
    print("meow")
    i = i - 1
"""""""""
# Забележете, че сега нашият код се изпълнява правилно, намалявайки i с 1 за всяка „итерация“ през цикъла.
# Този термин итерация има специално значение в рамките на кодирането.
# Под итерация имаме предвид един цикъл през цикъла.
# Първата итерация е "0-та" итерация през цикъла.
# Втората е „1-вата“ итерация.
# В програмирането ние броим, започвайки с 0, след това 1, след това 2.
# Можем допълнително да подобрим нашия код, както следва:
"""""""""
i = 1
    while i <= 3:
        print("meow")
        i = i + 1
"""""""""
# Забележете, че когато кодираме i = i + 1, присвояваме стойността на i отдясно наляво.
# По-горе започваме от едно, както повечето хора броят (1, 2, 3).
# Ако изпълните кода по-горе, ще го видите да мяука три пъти.
# Най-добрата практика в програмирането е да започнете да броите с нула.
# Можем да подобрим нашия код, за да започнем да броим с нула:
"""""""""
i = 0
while i < 3:
    print("meow")
    i += 1
"""""""""
# Забележете как промяната на оператора на i < 3 позволява на нашия код да функционира по предназначение.
# Започваме с броене с 0 и той итерира нашия цикъл три пъти, произвеждайки три мяукания.
# Освен това забележете как i += 1 е същото като i = i + 1.

# -- For Loops --
# Цикълът for е различен тип цикъл.
# За да разберете най-добре for цикъла, най-добре е да започнете, като говорите за нов тип променлива, наречен списък в Python.
# Както и в други области на нашия живот, можем да имаме списък с хранителни стоки, списък със задачи и т.н.
# Цикълът for преминава през списък от елементи.
# Например, в прозореца на текстовия редактор, променете вашия cat.py код, както следва:
"""""""""
for i in [0, 1, 2]:
    print("meow"
"""""""""
# Забележете колко изчистен е този код в сравнение с предишния код на цикъла while.
# В този код i започва с 0, meow, на i се присвоява 1, meow и накрая на i се присвоява 2, meow и след това завършва.
# Докато този код постига това, което искаме, има някои възможности за подобряване на нашия код за екстремни случаи.
# На пръв поглед нашият код изглежда страхотно. Но какво ще стане, ако искате да повторите до един милион?
# Най-добре е да създадете код, който може да работи с такива екстремни случаи.
# Съответно можем да подобрим нашия код, както следва:
"""""""""
for i in range(3):
    print("meow")
"""""""""
# Забележете как range(3) автоматично връща три стойности (0, 1 и 2).
# Този код ще се изпълни и ще произведе желания ефект, мяукайки три пъти.
# Нашият код може да бъде допълнително подобрен. Забележете как никога не използваме i изрично в нашия код.
# Тоест, докато Python се нуждае от i като място за съхраняване на номера на итерацията на цикъла,
# ние никога не го използваме за други цели.

# В Python, ако такава променлива няма никакво друго значение в нашия код,
# можем просто да представим тази променлива като единична долна черта _.
# Следователно можете да промените кода си, както следва:
"""""""""
for _ in range(3):
    print("meow")
"""""""""
# Забележете как промяната на i на _ няма никакво влияние върху функционирането на нашата програма.

# Нашият код може да бъде допълнително подобрен. За да разширите ума си към възможностите в Python,
# разгледайте следния код:
"""""""""
print("meow" * 3)
"""""""""
# Забележете как ще мяука три пъти, но програмата ще произведе мяумяумяу като резултат.
# Помислете: Как можете да създадете прекъсване на ред в края на всяко мяукане?

# Всъщност можете да редактирате кода си, както следва:
"""""""""
print("meow\n" * 3, end="")
"""""""""
# Забележете как този код произвежда три мяукания, всяко на отделен ред.
# Чрез добавяне на end="" и \n казваме на компилатора да добави нов ред в края на всяко мяукане.

# Подобряване с въвеждане от потребителя

# Може би искаме да получим информация от нашия потребител.
# Можем да използваме цикли като начин за валидиране на входа на потребителя.
# Обща парадигма в рамките на Python е използването на цикъл while за валидиране на въведеното от потребителя.
# Например, нека опитаме да подканим потребителя за число, по-голямо или равно на 0:
"""""""""
while True:
    n = int(input("What's n? "))
    if n < 0:
        continue
    else:
        break
"""""""""
# Забележете, че въведохме две нови ключови думи в Python, continue и break.
# continue изрично казва на Python да премине към следващата итерация на цикъл.
# break, от друга страна, казва на Python да "излезе" от цикъл рано, преди да е завършил всичките си итерации.
# В този случай ще продължим към следващата итерация на цикъла, когато n е по-малко от 0 – в крайна сметка
# ще подканим отново потребителя с „What's n?“.
# Ако обаче n е по-голямо или равно на 0, ще излезем от цикъла
# и ще позволим на останалата част от нашата програма да работи.

# Оказва се, че ключовата дума continue е излишна в този случай. Можем да подобрим нашия код, както следва:
"""""""""
while True:
    n = int(input("What's n? "))
    if n > 0:
        break

for _ in range(n):
    print("meow")
"""""""""
# Забележете как този цикъл while ще работи винаги (завинаги), докато n е по-голямо от 0.
# Когато n е по-голямо от 0, цикълът прекъсва.

# Внасяйки нашето предишно обучение, можем да използваме функции за допълнително подобряване на нашия код:
"""""""""
def main():
    meow(get_number())

def get_number():
    while True:
        n = int(input("What's n? "))
        if n > 1:
            return n

def meow(n):
    for _ in range(n):
        print("meow")

main()
"""""""""
# Забележете как не само променихме вашия код, за да работи в множество функции,
# но също така използвахме оператор return, за да върнем стойността на n обратно към основната функция.


# -- Повече за списъците - More About Lists --

# Помислете за света на Хогуортс от прочутата вселена на Хари Потър.
# В терминала въведете код hogwarts.py. В текстовия редактор кодирайте както следва:
"""""""""
students = ["Hermoine", "Harry", "Ron"]

print(students[0])
print(students[1])
print(students[2])

"""""""""
# Забележете как имаме списък със студенти с техните имена, както по-горе.
# След това отпечатваме ученика, който е на 0-то място, „Hermoine“. Всеки от другите студенти също е отпечатан.
#
# Точно както илюстрирахме по-рано, можем да използваме цикъл, за да обикаляме списъка.
# Можете да подобрите кода си, както следва:
"""""""""
students = ["Hermoine", "Harry", "Ron"]

for student in students:
    print(student)
"""""""""
# Забележете, че за всеки ученик в списъка със студенти, той ще отпечата ученика по предназначение.
# Може би се чудите защо не използвахме обозначението _, както беше обсъдено по-горе.
# Избираме да не правим това, защото student се използва изрично в нашия код.

# Можете да научите повече в документацията на Python за списъци.
# https://docs.python.org/3/tutorial/datastructures.html#more-on-lists

# -- Length -- Дължина --

# Можем да използваме len като начин за проверка на дължината на списъка, наречен студенти.
# Представете си, че не просто искате да отпечатате името на ученика, но и неговата позиция в списъка.
# За да постигнете това, можете да редактирате кода си, както следва:
"""""""""
students = ["Hermoine", "Harry", "Ron"]

for i in range(len(students)):
    print(i + 1, students[i])
"""""""""
# Забележете как изпълнението на този код води не само до получаване на позицията на всеки ученик плюс едно чрез i + 1,
# но също така отпечатва името на всеки ученик.
# len ви позволява динамично да виждате колко дълъг е списъкът на учениците, независимо колко расте.

# Можете да научите повече в документацията на Python за len.
# https://docs.python.org/3/library/functions.html?highlight=len#len


# -- Dictionaries -- РЕЧНИЦИ --

# dicts или Dictionaries е структура от данни, която ви позволява да свързвате ключове със стойности.
# Когато списъкът е списък с множество стойности, dict свързва ключ със стойност.
# Имайки предвид къщите на Хогуортс, можем да назначим конкретни ученици в конкретни къщи.
"""""""""
students = ["Hermoine", "Harry", "Ron", "Draco"]
houses = ["Gryffindor", "Gryffindor", "Griffindor", "Slytherin"]
"""""""""
# Забележете, че можем да обещаем, че винаги ще поддържаме тези списъци в ред.
# Индивидът на първата позиция от учениците се свързва с къщата на първата позиция в списъка с къщи и т.н.
# Това обаче може да стане доста тромаво, тъй като списъците ни растат!
#
# Можем да подобрим нашия код с помощта на dict, както следва:
"""""""""
students = {
    "Hermoine": "Gryffindor",
    "Harry": "Gryffindor",
    "Ron": "Gryffindor",
    "Draco": "Slytherin",
}
print(students["Hermoine"])
print(students["Harry"])
print(students["Ron"])
print(students["Draco"])

output:
Gryffindor
Gryffindor
Gryffindor
Slytherin
"""""""""

# Забележете как използваме {} фигурни скоби, за да създадем речник.
# Когато списъците използват числа, за да обикалят списъка, dicts ни позволяват да използваме думи.
# Стартирайте кода си и се уверете, че резултатът ви е както следва:

# Можем да подобрим нашия код, както следва:
"""""""""
students = {
    "Hermoine": "Gryffindor",
    "Harry": "Gryffindor",
    "Ron": "Gryffindor",
    "Draco": "Slytherin",
}
for student in students:
    print(student)
    
output:
Hermoine
Harry
Ron
Draco
"""""""""
# Забележете как изпълнявайки този код, for цикълът ще обхожда само всички ключове,
# което ще доведе до списък с имената на учениците. Как можем да отпечатаме и стойности, и ключове?

# Променете кода си, както следва:
"""""""""
students = {
    "Hermoine": "Gryffindor",
    "Harry": "Gryffindor",
    "Ron": "Gryffindor",
    "Draco": "Slytherin",
}
for student in students:
    print(student, students[student])

output:
Hermoine Gryffindor
Harry Gryffindor
Ron Gryffindor
Draco Slytherin
"""""""""
# Забележете как ученици students[student] ще отидат до ключа на всеки ученик и ще намерят стойността на къщата им.
# Изпълнете кода си и ще забележите как изходът е малко объркан.
# Можем да изчистим функцията за печат, като подобрим нашия код, както следва:
"""""""""
students = {
    "Hermoine": "Gryffindor",
    "Harry": "Gryffindor",
    "Ron": "Gryffindor",
    "Draco": "Slytherin",
}
for student in students:
    print(student, students[student], sep=", ")
    
output:
Hermoine, Gryffindor
Harry, Gryffindor
Ron, Gryffindor
Draco, Slytherin
"""""""""

# Забележете как това създава чисто разделяне на , между всеки отпечатан елемент.

# Ами ако имаме повече информация за нашите ученици? Как бихме могли да свържем повече данни с всеки от учениците?
"""""""""
    | name      | house         | patronus
0   |Harmione   |   Gryffindor  |   Otter
1   |Harry      |   Gryffindor  |   Stag
2   |Ron        |   Gryffindor  |   Jack Russell terrier
3   |Draco      |   Slytherin   | 

"""""
# Можете да си представите, че искате да имате много данни, свързани с множество неща с един ключ.
# Подобрете кода си, както следва:
"""""
students = [
    {"name": "Hermoine", "house": "Gryffindor", "patronus": "Otter"},
    {"name": "Harry", "house": "Gryffindor", "patronus": "Stag"},
    {"name": "Ron", "house": "Gryffindor", "patronus": "Jack Russell terrier"},
    {"name": "Draco", "house": "Slytherin", "patronus": None},
]
"""""
# Забележете как този код създава list  от dicts. Списъкът, наречен студенти, има четири dicts  в него:
# По един за всеки ученик. Също така забележете, че Python има специално обозначение None,
# където няма стойност, свързана с ключ.
#
# Сега имате достъп до множество интересни данни за тези ученици. Сега допълнително променете кода си, както следва:
"""""
students = [
    {"name": "Hermoine", "house": "Gryffindor", "patronus": "Otter"},
    {"name": "Harry", "house": "Gryffindor", "patronus": "Stag"},
    {"name": "Ron", "house": "Gryffindor", "patronus": "Jack Russell terrier"},
    {"name": "Draco", "house": "Slytherin", "patronus": None},
]

for student in students:
    print(student["name"], student["house"], student["patronus"], sep=", ")
"""""
# Забележете как цикълът for ще премине през всеки от dicts в списъка, наречен студенти.
# Можете да научите повече в документацията на Python за dicts.
# https://docs.python.org/3/tutorial/datastructures.html#dictionaries


